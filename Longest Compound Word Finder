import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.TreeMap;
import java.util.Scanner;

public class LongtCompoundWord {
 public static void main(String[] args) {
  String words[] = { "cat", "cats", "catsdogcats", "catxdogcatsrat", "dog", "dogcatsdog", "hippopotamuses",
    "rat", "ratcatdogcat" };
  System.out.println("Longest Compound word : " + longestCompundWord(words));

 }

 private static String longestCompundWord(String[] words) {
  ArrayList<String> dictionary = new ArrayList<String>();
  TreeMap<String, Integer> wordTree = new TreeMap<String, Integer>(new Comparator<String>() {
   @Override
   public int compare(String o1, String o2) {
    return o1.length() - o2.length();
   }
  });

  for (int i = 0; i < words.length; i++) {
   wordTree.put(words[i],i);
   dictionary.add(words[i]);
  }

  System.out.println(wordTree);
  return findLongestCompoundWord(wordTree, dictionary);

 }

 private static boolean isCompoundWord(String word, ArrayList<String> dictionary) {
  if (dictionary.contains(word))
   return true;
  for (int i = 1; i < word.length(); i++) {
   String prefix = word.substring(0, i);
   if (isCompoundWord(prefix, dictionary)) {
    String remainder = word.substring(i, word.length());
    if (remainder.length() == 0)
     return true;
    return isCompoundWord(remainder, dictionary);
   }
  }
  return false;
 }

 public static String findLongestCompoundWord(TreeMap<String, Integer> wordTree, ArrayList<String> dictionary) {
  while (wordTree.size() > 0) {
   String word = wordTree.lastKey();
   wordTree.remove(word);
   dictionary.remove(word);
   if (isCompoundWord(word, dictionary))
    return word;
  }
  return "";
}
}
